-- | A stripped down version of JSON.

module Data.JSON where

import           Control.Monad
import           Test.QuickCheck

data JValue = JNull
            | JString String
            | JNumber Double
            | JBool Bool
            | JObject [(String, JValue)]
            | JArray  [JValue]
            deriving (Show)

-- * Some helper functions

-- | Gets the top level
attributes :: JValue -> [String]
attributes (JObject xs) = fst <$> xs
attributes _ = []

-- Note that the instance of Arbitrary has to be declared here:
--     http://stackoverflow.com/questions/3079537/orphaned-instances-in-haskell

instance Arbitrary JValue where
  arbitrary = oneof [ return JNull
                    , liftM JString arbitrary
                    , liftM JBool arbitrary
                    , liftM JObject (listOf $ liftM2 (,) arbitrary arbitrary)
                    , liftM JArray (listOf arbitrary)
                    ]


-- | Now you can see the attributes that were generated by performing:
--
-- > attributes <$> (generate  (arbitrary :: Gen JValue))
--
